openapi: 3.1.0
info:
  title: Order History API
  description: API for managing order history
  license:
    name: Apache 2.0
    url: http://springdoc.org
  version: "1.0"
servers:
- url: http://localhost:8081
  description: Generated server url
paths:
  /order-history/update-order-status:
    put:
      tags:
      - order-history-controller
      summary: Update order history status
      description: Updates the status of an existing order in OrderHistoryService.
      operationId: updateOrderStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStatusRequest"
        required: true
      responses:
        "200":
          description: Order status updated
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderHistory"
        "404":
          description: Order not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderHistory"
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderHistory"
  /order-history/save-order-history:
    post:
      tags:
      - order-history-controller
      summary: Create a new order history entry
      description: Stores a new order record in the history service after an order
        is created in OrderService.
      operationId: saveOrderHistory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderHistory"
        required: true
      responses:
        "200":
          description: Order history entry created
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderHistory"
        "400":
          description: Invalid request
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderHistory"
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderHistory"
  /order-history/get-by-id:
    get:
      tags:
      - order-history-controller
      summary: Get order history entry by ID
      operationId: getOrderById
      parameters:
      - name: orderId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Order history entry found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderHistory"
        "404":
          description: Order not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderHistory"
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderHistory"
  /order-history/get-all:
    get:
      tags:
      - order-history-controller
      summary: Get all order history entries with pagination and HATEOAS links
      operationId: getAllOrders
      parameters:
      - name: pageNo
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: pageSize
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: Order history entries found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageResponseOrderHistoryModel"
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageResponseOrderHistoryModel"
components:
  schemas:
    UpdateStatusRequest:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        status:
          type: string
    OrderHistory:
      type: object
      description: Model reprezentujący historię zamówienia w systemie
      properties:
        id:
          type: integer
          format: int64
          description: Unikalny identyfikator historii zamówienia
          example: 1
        customerName:
          type: string
          description: "Imię i nazwisko klienta, który złożył zamówienie"
          example: Jan Kowalski
        deliveryStatus:
          type: string
          description: Aktualny status dostawy zamówienia
          example: DELIVERED
        productName:
          type: string
          description: "Nazwa produktu, który został zamówiony"
          example: Laptop Lenovo ThinkPad X1
        totalPrice:
          type: number
          description: Całkowita cena zamówienia
          example: 2999.99
    OrderHistoryModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        customerName:
          type: string
        deliveryStatus:
          type: string
        productName:
          type: string
        totalPrice:
          type: number
        _links:
          $ref: "#/components/schemas/Links"
    PageResponseOrderHistoryModel:
      type: object
      description: Stronicowana odpowiedź zawierająca listę elementów oraz linki HATEOAS.
      properties:
        currentPage:
          type: integer
          format: int32
          description: Aktualna strona
          example: 1
        pageSize:
          type: integer
          format: int32
          description: Liczba elementów na stronie
          example: 10
        totalPages:
          type: integer
          format: int32
          description: Całkowita liczba stron
          example: 5
        content:
          type: array
          description: Lista obiektów na danej stronie
          items:
            $ref: "#/components/schemas/OrderHistoryModel"
        last:
          type: boolean
          description: Czy jest to ostatnia strona
          example: false
        hasNext:
          type: boolean
          description: Czy istnieje kolejna strona
          example: true
    Link:
      type: object
      properties:
        href:
          type: string
        hreflang:
          type: string
        title:
          type: string
        type:
          type: string
        deprecation:
          type: string
        profile:
          type: string
        name:
          type: string
        templated:
          type: boolean
    Links:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Link"
